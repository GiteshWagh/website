[{"body":"","link":"https://giteshwagh.com/","section":"","tags":null,"title":""},{"body":"Project 5 : Snake Game In Python This is a Python project that uses the Pygame library to create a simple game where a player controls a snake on a grid. The snake can move in different directions and must eat randomly generated green \u0026quot;snacks\u0026quot; to grow longer. The game continues until the snake hits the boundaries of the grid or runs into itself.\nHere's a breakdown of the different components and functionalities in simple English:\nImporting Libraries: The program starts by importing necessary libraries like math, random, pygame, and tkinter.\nSetting Up Constants: The game screen is set up with a width of 500 pixels and a height of 500 pixels. The grid is divided into 25 columns and 20 rows.\nDefining Cube Class: The cube class represents a single unit on the grid. It has properties like position, direction, and color. It can move in different directions and draw itself on the game screen.\nDefining Snake Class: The snake class represents the player-controlled snake. It consists of a series of connected cubes. The snake can move, grow longer when it eats a snack, and restart when it hits the boundaries or itself.\nGame Logic: The main game loop is in the main() function. It initializes the game window and sets up the snake and a green snack. The loop continues as long as the flag is true.\nMoving the Snake: The snake's movement is controlled using the arrow keys. The move() method of the snake class updates the position of each cube in the snake's body.\nHandling Collisions: The game checks for collisions with the boundaries and the snake's own body. If the snake collides with a boundary or itself, the game ends and the player's score is displayed. The snake can also collide with the green snack, causing it to grow longer.\nDrawing the Game: The redrawWindow() function clears the screen, draws the grid, the snake, and the snack. It updates the game display.\nRunning the Game: The main() function initializes the game window, sets up the snake and the snack, and enters the main game loop. The loop keeps the game running, processing player input and updating the game state.\nIn summary, this project implements a basic snake game where players control a snake to collect green snacks and avoid collisions. It demonstrates fundamental concepts of game programming, user input handling, collision detection, and graphical rendering using the Pygame library.\nCode: 1import math 2import random 3import pygame 4import random 5import tkinter as tk 6from tkinter import messagebox 7 8width = 500 9height = 500 10 11cols = 25 12rows = 20 13 14 15class cube(): 16 rows = 20 17 w = 500 18 def __init__(self, start, dirnx=1, dirny=0, color=(255,0,0)): 19 self.pos = start 20 self.dirnx = dirnx 21 self.dirny = dirny # \u0026#34;L\u0026#34;, \u0026#34;R\u0026#34;, \u0026#34;U\u0026#34;, \u0026#34;D\u0026#34; 22 self.color = color 23 24 def move(self, dirnx, dirny): 25 self.dirnx = dirnx 26 self.dirny = dirny 27 self.pos = (self.pos[0] + self.dirnx, self.pos[1] + self.dirny) 28 29 30 def draw(self, surface, eyes=False): 31 dis = self.w // self.rows 32 i = self.pos[0] 33 j = self.pos[1] 34 35 pygame.draw.rect(surface, self.color, (i*dis+1,j*dis+1,dis-2,dis-2)) 36 if eyes: 37 centre = dis//2 38 radius = 3 39 circleMiddle = (i*dis+centre-radius,j*dis+8) 40 circleMiddle2 = (i*dis + dis -radius*2, j*dis+8) 41 pygame.draw.circle(surface, (0,0,0), circleMiddle, radius) 42 pygame.draw.circle(surface, (0,0,0), circleMiddle2, radius) 43 44 45 46class snake(): 47 body = [] 48 turns = {} 49 50 def __init__(self, color, pos): 51 #pos is given as coordinates on the grid ex (1,5) 52 self.color = color 53 self.head = cube(pos) 54 self.body.append(self.head) 55 self.dirnx = 0 56 self.dirny = 1 57 58 def move(self): 59 for event in pygame.event.get(): 60 if event.type == pygame.QUIT: 61 pygame.quit() 62 keys = pygame.key.get_pressed() 63 64 for key in keys: 65 if keys[pygame.K_LEFT]: 66 self.dirnx = -1 67 self.dirny = 0 68 self.turns[self.head.pos[:]] = [self.dirnx,self.dirny] 69 elif keys[pygame.K_RIGHT]: 70 self.dirnx = 1 71 self.dirny = 0 72 self.turns[self.head.pos[:]] = [self.dirnx,self.dirny] 73 elif keys[pygame.K_UP]: 74 self.dirny = -1 75 self.dirnx = 0 76 self.turns[self.head.pos[:]] = [self.dirnx,self.dirny] 77 elif keys[pygame.K_DOWN]: 78 self.dirny = 1 79 self.dirnx = 0 80 self.turns[self.head.pos[:]] = [self.dirnx,self.dirny] 81 82 for i, c in enumerate(self.body): 83 p = c.pos[:] 84 if p in self.turns: 85 turn = self.turns[p] 86 c.move(turn[0], turn[1]) 87 if i == len(self.body)-1: 88 self.turns.pop(p) 89 else: 90 c.move(c.dirnx,c.dirny) 91 92 93 def reset(self,pos): 94 self.head = cube(pos) 95 self.body = [] 96 self.body.append(self.head) 97 self.turns = {} 98 self.dirnx = 0 99 self.dirny = 1 100 101 def addCube(self): 102 tail = self.body[-1] 103 dx, dy = tail.dirnx, tail.dirny 104 105 if dx == 1 and dy == 0: 106 self.body.append(cube((tail.pos[0]-1,tail.pos[1]))) 107 elif dx == -1 and dy == 0: 108 self.body.append(cube((tail.pos[0]+1,tail.pos[1]))) 109 elif dx == 0 and dy == 1: 110 self.body.append(cube((tail.pos[0],tail.pos[1]-1))) 111 elif dx == 0 and dy == -1: 112 self.body.append(cube((tail.pos[0],tail.pos[1]+1))) 113 114 self.body[-1].dirnx = dx 115 self.body[-1].dirny = dy 116 117 def draw(self, surface): 118 for i,c in enumerate(self.body): 119 if i == 0: 120 c.draw(surface, True) 121 else: 122 c.draw(surface) 123 124 125 126def redrawWindow(): 127 global win 128 win.fill((0,0,0)) 129 drawGrid(width, rows, win) 130 s.draw(win) 131 snack.draw(win) 132 pygame.display.update() 133 pass 134 135 136 137def drawGrid(w, rows, surface): 138 sizeBtwn = w // rows 139 140 x = 0 141 y = 0 142 for l in range(rows): 143 x = x + sizeBtwn 144 y = y +sizeBtwn 145 146 pygame.draw.line(surface, (255,255,255), (x, 0),(x,w)) 147 pygame.draw.line(surface, (255,255,255), (0, y),(w,y)) 148 149 150 151def randomSnack(rows, item): 152 positions = item.body 153 154 while True: 155 x = random.randrange(1,rows-1) 156 y = random.randrange(1,rows-1) 157 if len(list(filter(lambda z:z.pos == (x,y), positions))) \u0026gt; 0: 158 continue 159 else: 160 break 161 162 return (x,y) 163 164 165def main(): 166 global s, snack, win 167 win = pygame.display.set_mode((width,height)) 168 s = snake((255,0,0), (10,10)) 169 s.addCube() 170 snack = cube(randomSnack(rows,s), color=(0,255,0)) 171 flag = True 172 clock = pygame.time.Clock() 173 174 while flag: 175 pygame.time.delay(50) 176 clock.tick(10) 177 s.move() 178 headPos = s.head.pos 179 if headPos[0] \u0026gt;= 20 or headPos[0] \u0026lt; 0 or headPos[1] \u0026gt;= 20 or headPos[1] \u0026lt; 0: 180 print(\u0026#34;Score:\u0026#34;, len(s.body)) 181 s.reset((10, 10)) 182 183 if s.body[0].pos == snack.pos: 184 s.addCube() 185 snack = cube(randomSnack(rows,s), color=(0,255,0)) 186 187 for x in range(len(s.body)): 188 if s.body[x].pos in list(map(lambda z:z.pos,s.body[x+1:])): 189 print(\u0026#34;Score:\u0026#34;, len(s.body)) 190 s.reset((10,10)) 191 break 192 193 redrawWindow() 194 195main() ","link":"https://giteshwagh.com/projects/project-5-snake-game-in-python/","section":"Projects","tags":["Programming","Coding","python","PythonTutorial"],"title":"💻Project 5 : Snake Game In Python"},{"body":"","link":"https://giteshwagh.com/authors/","section":"authors","tags":null,"title":"Authors"},{"body":"","link":"https://giteshwagh.com/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://giteshwagh.com/tags/coding/","section":"tags","tags":null,"title":"Coding"},{"body":"","link":"https://giteshwagh.com/authors/gitesh-wagh/","section":"authors","tags":null,"title":"Gitesh Wagh"},{"body":"","link":"https://giteshwagh.com/tags/programming/","section":"tags","tags":null,"title":"Programming"},{"body":"","link":"https://giteshwagh.com/projects/","section":"projects","tags":null,"title":"Projects"},{"body":"","link":"https://giteshwagh.com/tags/python/","section":"tags","tags":null,"title":"python"},{"body":"","link":"https://giteshwagh.com/categories/python-projects/","section":"categories","tags":null,"title":"Python Projects"},{"body":"","link":"https://giteshwagh.com/tags/pythontutorial/","section":"tags","tags":null,"title":"PythonTutorial"},{"body":"","link":"https://giteshwagh.com/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"Project 4 : Calculator In Python This Python project is a basic calculator that performs arithmetic operations on two numbers. The project employs fundamental programming concepts like functions, if-else statements, variables, and datatypes to provide a simple calculator interface.\nHere's a description of the project in simple language:\nIntroduction and Instructions: The program begins by displaying a message to the user. It explains how to use the calculator by entering specific keywords like 'add', 'sub', 'multi', 'div', and 'power' for different arithmetic operations.\nTaking User Inputs: The program prompts the user to enter two numbers and the desired arithmetic operation. These inputs are stored in variables x, y, and o, respectively.\nConditions and Calculations:\nThe program uses if-else statements to determine the operation to perform based on the value of o (operation keyword). If the operation is 'add', the program adds the two numbers and prints the result. If the operation is 'sub', it subtracts the second number from the first and prints the result. If the operation is 'multi', it multiplies the two numbers and prints the result. If the operation is 'div', it divides the first number by the second and prints the result. If the operation is 'power', it calculates the first number raised to the power of the second number and prints the result. Invalid Input Handling: If the input for the operation is not one of the specified keywords, the program prints \u0026quot;Invalid Input\u0026quot; to indicate that the input is not recognized.\nIn summary, this project demonstrates a simple calculator that performs arithmetic calculations based on user inputs. The user is instructed to use specific keywords for operations, and the program responds with the calculated result or an \u0026quot;Invalid Input\u0026quot; message. This project effectively utilizes programming concepts like functions for displaying instructions, if-else statements for decision-making, variables to store user inputs, and datatypes for numeric calculations.\nCode: 1# 1. Notice For User 2print(\u0026#34;\u0026#34;\u0026#34;\\nUse \u0026#39;add\u0026#39; for Addition. 3Use \u0026#39;sub\u0026#39; for Substraction. 4Use \u0026#39;multi\u0026#39; for Multiplication. 5Use \u0026#39;div\u0026#39; for Division. 6Use \u0026#39;power\u0026#39; for Power Calculations.\\n\u0026#34;\u0026#34;\u0026#34;) 7 8# 2.Variables And Data 9x = input(\u0026#34;Enter The 1st Number : \u0026#34;) 10y = input(\u0026#34;Enter The 2nd Number : \u0026#34;) 11o = input(\u0026#34;Enter The Operation : \u0026#34;) 12 13# 3.Conditions 14if (o == \u0026#34;add\u0026#34;): 15 print(float(x) + float(y)) 16 17elif (o == \u0026#34;sub\u0026#34;): 18 print(float(x) - float(y)) 19 20elif (o == \u0026#34;multi\u0026#34;): 21 print(float(x) * float(y)) 22 23elif (o == \u0026#34;div\u0026#34;): 24 print(float(x) / float(y)) 25 26elif (o == \u0026#34;power\u0026#34;): 27 print(float(x) ** float(y)) 28 29else: 30 print(\u0026#34;Invalid Input\u0026#34;) ","link":"https://giteshwagh.com/projects/project-4-calculator-in-python/","section":"Projects","tags":["Programming","Coding","python","PythonTutorial"],"title":"💻Project 4 : Calculator In Python"},{"body":"Introduction To Game Development Introduction In the vast and ever-evolving landscape of entertainment, few mediums captivate audiences quite like video games. Game development is a harmonious blend of artistry and technology, where creative vision and technical expertise converge to create immersive digital worlds that transport players to new realms of adventure and imagination. In this blog, we'll delve into the fascinating realm of game development, exploring its key components, challenges, and the magic that turns lines of code into captivating experiences.\nThe Building Blocks of Game Development Conceptualization and Design: Just like any creative endeavor, game development begins with an idea. Whether it's a sweeping epic set in a fantasy realm or a minimalist puzzle game, every game starts with a vision. This vision is then translated into a design document, outlining gameplay mechanics, art style, story, characters, and more.\nProgramming and Development: The backbone of any game lies in its code. Game developers use programming languages like C++, C#, and Python to bring their designs to life. This involves creating algorithms for gameplay mechanics, handling physics, AI behavior, and more. Developers also work on user interfaces, ensuring a seamless and engaging player experience.\nArt and Graphics: Visual aesthetics play a pivotal role in game development. Skilled artists and graphic designers create concept art, character designs, environments, and animations that give life to the game's world. The art style can range from hyper-realistic to minimalist, and each choice influencing how players perceive the game.\nSound Design and Music: Sound and music are often underestimated components of game development. These elements enhance immersion by providing ambiance, emotional cues, and atmosphere. From epic orchestral scores to subtle environmental sounds, audio design creates a deeper connection between players and the game.\nChallenges in Game Development Technical Constraints: Game developers often need to work within the limitations of hardware and software. Striking a balance between visual fidelity and performance is a constant challenge, especially as technology advances and player expectations grow.\nProject Management: Game development involves complex teamwork and coordination. Managing timelines, resources, and communication between various departments are crucial to ensure a project stays on track.\nInnovation vs. Familiarity: Striking the right balance between innovation and familiarity is a delicate task. Developers aim to create fresh, exciting experiences while also providing elements that players can relate to and enjoy.\nTesting and Bug Fixing: Games are intricate systems, and bugs are inevitable. Rigorous testing and bug-fixing processes are necessary to ensure a smooth and enjoyable experience for players.\nThe Magic of Immersion What sets games apart from other forms of entertainment is their unique ability to immerse players in new worlds. Interactivity empowers players to shape their own experiences, whether it's through choosing dialogue options in a role-playing game or solving intricate puzzles in a mystery adventure.\nThe Future of Game Development As technology continues to evolve, so does the landscape of game development. From virtual reality and augmented reality experiences to more sophisticated AI-driven NPCs (non-playable characters), the possibilities are boundless. Cross-platform play and cloud gaming are also reshaping how players engage with their favorite titles.\nConclusion Game development is a dynamic and multifaceted discipline that harmonizes creativity, technology, and human interaction. The journey from concept to final product is a testament to human ingenuity and the power of collaboration. As players, we are the beneficiaries of these efforts, able to explore, learn, and be entertained in ways that were once thought impossible. So, the next time you dive into a digital world, take a moment to appreciate the artistry and science that make it all possible.\n","link":"https://giteshwagh.com/post/introduction-to-game-development/","section":"post","tags":["Game Development","Gaming","Development"],"title":"💡 Introduction To Game Development "},{"body":"Project 3 : Snake-Water-Gun Game In Python This Python project is a simple game called \u0026quot;Snake-Water-Gun.\u0026quot; It utilizes several fundamental programming concepts to create an interactive game where a player competes against the computer. The project showcases the use of the random module, if-else statements, lists, variables, and basic data types.\nHere's an explanation of the code in easy-to-understand language:\nIntroduction: The program begins with a welcoming message, introducing the user to the \u0026quot;Snake-Water-Gun\u0026quot; game.\nImporting the Random Module: The code imports the random module, which allows the program to randomly select an option for the computer's choice.\nCreating the List of Choices: A list named list1 is created containing the three choices: \u0026quot;Snake,\u0026quot; \u0026quot;Water,\u0026quot; and \u0026quot;Gun.\u0026quot; These are the options available for both the player and the computer.\nComputer's Choice: The computer's choice is generated randomly from the list1 using the random.choice() function. This represents the computer's move in the game.\nPlayer's Choice: The program prompts the player to enter their choice among \u0026quot;Snake,\u0026quot; \u0026quot;Water,\u0026quot; or \u0026quot;Gun.\u0026quot; The player's choice is stored in the Players_Choice variable.\nComparison and Result:\nThe program compares the computer's choice and the player's choice using a series of if-else statements. If both choices are the same, it results in a tie. If the choices differ, the program checks different combinations of choices to determine the winner. For instance: If the computer chose \u0026quot;Snake\u0026quot; and the player chose \u0026quot;Water,\u0026quot; the computer wins. If the computer chose \u0026quot;Snake\u0026quot; and the player chose \u0026quot;Gun,\u0026quot; the player wins. And similarly for other combinations. Depending on the comparisons, the program prints out who won or if it's a tie. Outcome Printing: The program displays the computer's choice and then prints the outcome of the game based on the comparison made earlier. If the player enters an option other than \u0026quot;Snake,\u0026quot; \u0026quot;Water,\u0026quot; or \u0026quot;Gun,\u0026quot; the program indicates that the input is invalid.\nIn summary, this project demonstrates a basic interactive game where the player competes against the computer in the \u0026quot;Snake-Water-Gun\u0026quot; game. The code randomly selects the computer's choice, takes the player's input, compares the choices using if-else statements, and then displays the winner or a tie. This project effectively employs essential programming concepts like randomness, conditional statements, list handling, variables, and basic data types.\nCode: 1import random 2 3print(\u0026#34;\\nWellcome To Snake-Water-Gun Game !!!\\n\u0026#34;) 4 5 6list1 = [\u0026#34;Snake\u0026#34;, \u0026#34;Water\u0026#34;,\u0026#34;Gun\u0026#34;] 7Computers_Choice = random.choice(list1) 8print(\u0026#34;{ Snake-Water-Gun }\u0026#34;) 9Players_Choice = input(\u0026#34;Enter Option : \u0026#34;) 10print(f\u0026#34;Computer choose : \u0026#34;,Computers_Choice) 11 12if (Computers_Choice == Players_Choice): 13 print(\u0026#34;!!!Tie!!!\u0026#34;) 14 15 16elif (Computers_Choice == \u0026#34;Snake\u0026#34; and Players_Choice == \u0026#34;Water\u0026#34;): 17 print(\u0026#34;!!!Computer Won!!!\u0026#34;) 18 19elif (Computers_Choice == \u0026#34;Snake\u0026#34; and Players_Choice == \u0026#34;Gun\u0026#34;): 20 print(\u0026#34;!!!You Won!!!\u0026#34;) 21 22 23 24elif (Computers_Choice == \u0026#34;Water\u0026#34; and Players_Choice == \u0026#34;Snake\u0026#34;): 25 print(\u0026#34;!!!You Won!!!\u0026#34;) 26 27elif (Computers_Choice == \u0026#34;Water\u0026#34; and Players_Choice == \u0026#34;Gun\u0026#34;): 28 print(\u0026#34;!!!Computer Won!!!\u0026#34;) 29 30 31elif (Computers_Choice == \u0026#34;Gun\u0026#34; and Players_Choice == \u0026#34;Snake\u0026#34;): 32 print(\u0026#34;!!!Computer Won!!!\u0026#34;) 33 34elif (Computers_Choice == \u0026#34;Gun\u0026#34; and Players_Choice == \u0026#34;Water\u0026#34;): 35 print(\u0026#34;!!!You Won!!!\u0026#34;) 36 37else : 38 print(\u0026#34;Invalid Input\u0026#34;) ","link":"https://giteshwagh.com/projects/project-3-snake-water-gun-game/","section":"Projects","tags":["Programming","Coding","python","PythonTutorial"],"title":"💻Project 3 : Snake-Water-Gun Game In Python"},{"body":"","link":"https://giteshwagh.com/tags/development/","section":"tags","tags":null,"title":"Development"},{"body":"","link":"https://giteshwagh.com/tags/game-development/","section":"tags","tags":null,"title":"Game Development"},{"body":"","link":"https://giteshwagh.com/tags/gaming/","section":"tags","tags":null,"title":"Gaming"},{"body":"","link":"https://giteshwagh.com/post/","section":"post","tags":["index"],"title":"Posts"},{"body":"Project 2 : Secure Profile Management System Description: The \u0026quot;Secure Profile Management System\u0026quot; is a Python project that demonstrates essential programming concepts, including functions, if-else statements, variables, and data types, to create a secure login and profile management system. This project provides users with the ability to set up their profiles, including an ID and password, and then log in securely using the provided credentials.\nKey Concepts Utilized:\n(1) Functions: The project uses functions to encapsulate and organize code blocks, enhancing readability and maintainability.\n(2)If-Else Statements: If-else statements are used to make decisions based on the provided input, enabling the system to validate user credentials and determine access rights.\n(3 )Variables and Data Types: Variables are employed to store and manipulate data, including user IDs and passwords. The project utilizes data types effectively for user input and comparison.\nFeatures:\nProfile Setup: Users can set up their profiles by entering a unique ID and a secure password.\nSecure Login: The system validates user input and provides access only to authorized users with correct credentials.\nUser Feedback: The project offers clear feedback to users about successful profile setup, login, and any errors encountered, improving user experience.\nConditional Control: The use of if-else statements enables conditional control flow, allowing the system to respond differently based on input conditions.\nTarget Audience:\nBeginner Python learners looking to understand and practice fundamental programming concepts. Individuals interested in building simple authentication systems using Python.\nUsage:\nRun the program. Set up your profile by entering a unique ID and a secure password. Log in by providing the previously set ID and password. Experience the program's responses based on the entered credentials. By exploring this project, users can gain hands-on experience in applying functions, if-else statements, variables, and data types to create a basic yet functional profile management and authentication system in Python.\nCode: 1print(\u0026#34;\\nSet Your Profile.\u0026#34;) 2ID = input(\u0026#34;Enter Your ID 👉 : \u0026#34;) 3password = input(\u0026#34;Set The Password 👉 : \u0026#34;) 4 5print(\u0026#34;✔ Account Setup is complete ✔\u0026#34;) 6 7print(\u0026#34;\\nLog In Now,\u0026#34;) 8x = input(\u0026#34;Enter ID Here 👉 : \u0026#34;) 9y = input(\u0026#34;Enter Passcode Here 👉 : \u0026#34;) 10 11if (x == ID): 12 print(\u0026#34;Wellcome\u0026#34;,ID,\u0026#39;👋,\u0026#39;) 13 14else: 15 print(\u0026#34;❌Invalid ID❌\u0026#34;) 16 17if(y==password): 18 print(\u0026#34;✔Correct password. Access Allowed✔\u0026#34;) 19 20else: 21 print(\u0026#34;❌Invalid Password❌\u0026#34;) ","link":"https://giteshwagh.com/projects/project-2-secure-profile-management-system/","section":"Projects","tags":["Programming","Coding","python","PythonTutorial"],"title":"💻Project 2 : Secure Profile Management System"},{"body":" This Python project is a simple game known as \u0026quot;Stone-Paper-Scissor.\u0026quot; It's a game of chance where a player competes against the computer in making choices among three options: \u0026quot;Stone,\u0026quot; \u0026quot;Paper,\u0026quot; and \u0026quot;Scissor.\u0026quot; The code makes use of several fundamental programming concepts:\n1. Random Module: The code imports the random module to generate a random choice for the computer. This randomness adds an element of unpredictability in this game, Which is really exciting.\n2. If-Else Statements: The heart of the game is the series of if-else statements that determine the winner based on the choices made by the player and the computer. These statements create a decision tree that leads to different outcomes.\n3. Lists: A list named list1 is created to hold the three choices: \u0026quot;Stone,\u0026quot; \u0026quot;Paper,\u0026quot; and \u0026quot;Scissor.\u0026quot; This list is used to randomly select the computer's choice.\n4. Variables: The code uses variables to store the player's choice, the computer's choice, and the outcome of the game. These variables (Players_Choice, computers_choice) hold different values as the game progresses.\n5. Datatypes: The code uses data types like strings and integers to represent and compare the choices made by the player and the computer. It also involves printing messages to the console, which involves string data types.\nHow the Game Works:\nThe player is welcomed to the game, and the rules are explained. The computer randomly selects one of the three choices (Stone, Paper, or Scissor). The player is able to enter their choice. The code compares the player's choice and the computer's choice using if-else statements: If both choices are the same, it's a tie, and a \u0026quot;Tie\u0026quot; message is displayed. If the choices differ, the code checks various combinations to determine the winner. For example: If the computer chose \u0026quot;Stone\u0026quot; and the player chose \u0026quot;Paper,\u0026quot; the player wins. If the computer chooses \u0026quot;Stone\u0026quot; and the player chooses \u0026quot;Scissor,\u0026quot; the computer wins. The code prints messages indicating who won or lost based on these comparisons. In summary, this project demonstrates a basic interactive game where the player competes against the computer in the classic game of \u0026quot;Stone-Paper-Scissor.\u0026quot; The outcome is determined by a series of if-else statements based on the choices made by both the player and the computer. It's a simple yet engaging example of using programming concepts to create a fun and interactive experience.\nCode: 1print(\u0026#34;\\nWellcom to Stone-Paper-Scissor\\n\u0026#34;) 2import random 3list1 = [\u0026#34;Stone\u0026#34;,\u0026#34;Paper\u0026#34;,\u0026#34;Scissor\u0026#34;] 4computers_choice = random.choice(list1) 5print(\u0026#34;Choose Stone-Paper-Scissor.\u0026#34;) 6Players_Choice = input(\u0026#34;Enter Your Choice : \u0026#34;) 7print(\u0026#34;computer choice :\u0026#34;,computers_choice) 8 9if (computers_choice == Players_Choice): 10print(\u0026#34;!!!Tie!!!\u0026#34;) 11 12elif (computers_choice == \u0026#34;Stone\u0026#34; and Players_Choice == \u0026#34;Paper\u0026#34;): 13print(\u0026#34;!!!You Won!!!\u0026#34;) 14 15elif (computers_choice == \u0026#34;Stone\u0026#34; and Players_Choice == \u0026#34;Scissor\u0026#34;): 16print(\u0026#34;!!!Computer Won!!!\u0026#34;) 17 18elif (computers_choice == \u0026#34;Paper\u0026#34; and Players_Choice == \u0026#34;Stone\u0026#34;): 19print(\u0026#34;!!!Computer Won!!!\u0026#34;) 20 21elif (computers_choice == \u0026#34;Paper\u0026#34; and Players_Choice == \u0026#34;Scissor\u0026#34;): 22print(\u0026#34;!!!You won!!!\u0026#34;) 23 24elif (computers_choice == \u0026#34;Scissor\u0026#34; and Players_Choice == \u0026#34;Stone\u0026#34;): 25print(\u0026#34;!!!You Won!!!\u0026#34;) 26 27elif (computers_choice == \u0026#34;Scissor\u0026#34; and Players_Choice == \u0026#34;Paper\u0026#34;): 28print(\u0026#34;!!!Computer Won!!!\u0026#34;) ","link":"https://giteshwagh.com/projects/project-1-stone-paper-scissor-game-in-python/","section":"Projects","tags":["Programming","Coding","python","PythonTutorial"],"title":"💻Project 1 : Stone-Paper-Scissor Game In Python"},{"body":"Hey Guys👋, Let's Learn Something About World's fastest Framework For Website Development Hugo.\nWhat Is Hugo? Hugo is the world's fastest framework for website building. Hugo is a fast and modern static site generator. Hugo is based on Go programing language. It supports multiple free hosting platforms like Github, Gitlab, Netlify, etc. Hugo provides us with various templates for web designing at zero cost. Hugo is one of the popular frameworks for building a website in a few minutes. Hugo uses Go, HTML, CSS, etc. for its rich content.\nHugo Features:- 11. Zero cost for building a website. 22. Free hosting. 33. Fast speed( At \u0026lt;1ms per page ). 44. No coding skills are required. 55. Secure and responsive site. 66. Amazing themes and template support. 77. Image processing. 88. Support Go, HTML, CSS, etc. programming languages for new features. 99. Support Github, Gitlab, Netlify, etc. 1010. Amamzing content management. How To Download Hugo? For downloading Hugo go to gohugo.io. Which is the official website of Hugo. We use various methods For downloading Hugo.\nUse Following Commands As Per Your Operating System For Downloading Hugo:- 1. Windows:- Package managers 1. Chocolatey Chocolatey is a free and open-source package manager for Windows. This will install the extended edition of Hugo:\n1choco install hugo-extended 2. Scoop Scoop is a free and open-source package manager for Windows. This will install the extended edition of Hugo:\n1scoop install hugo-extended 3. Winget Winget is Microsoft’s official free and open-source package manager for Windows. This will install the extended edition of Hugo:\n1winget install Hugo.Hugo.Extended 4. Docker Erlend Klakegg Bergheim graciously maintains Docker images based on images for Alpine Linux, Busybox, Debian, and Ubuntu.\n1docker pull klakegg/hugo Source - https://gohugo.io/installation/windows/\n2. Linux:- Package managers 1. Snap Snap is a free and open-source package manager for Linux. Available for most distributions, snap packages are simple to install and are automatically updated.\nThe Hugo snap package is strictly confined. Strictly confined snaps run in complete isolation, up to a minimal access level that’s deemed always safe. The sites you create and build must be located within your home directory, or on removable media.\nThis will install the extended edition of Hugo:\n1sudo snap install hugo To enable or revoke access to removable media:\n1sudo snap connect hugo:removable-media 2sudo snap disconnect hugo:removable-media To enable or revoke access to SSH keys:\n1sudo snap connect hugo:ssh-keys 2sudo snap disconnect hugo:ssh-keys 2. Homebrew Homebrew is a free and open-source package manager for macOS and Linux. This will install the extended edition of Hugo:\n1brew install hugo Repository packages Most Linux distributions maintain a repository for commonly installed applications. Please note that these repositories may not contain the latest release.\n3. Arch Linux Derivatives of the Arch Linux distribution of Linux include EndeavourOS, Garuda Linux, Manjaro, and others. This will install the extended edition of Hugo:\n1sudo pacman -S hugo 4. Debian Derivatives of the Debian distribution of Linux include elementary OS, KDE neon, Linux Lite, Linux Mint, MX Linux, Pop!_OS, Ubuntu, Zorin OS, and others. This will install the extended edition of Hugo:\n1sudo apt install hugo You can also download Debian packages from the latest release page.\n5. Fedora Derivatives of the Fedora distribution of Linux include CentOS, Red Hat Enterprise Linux, and others. This will install the extended edition of Hugo:\n1sudo dnf install hugo openSUSE Derivatives of the openSUSE distribution of Linux include GeckoLinux, Linux Karmada, and others. This will install the extended edition of Hugo:\n1sudo zypper install hugo 6. Solus The Solus distribution of Linux includes Hugo in its package repository. This will install the standard edition of Hugo:\n1sudo eopkg install hugo 7. Docker Erlend Klakegg Bergheim graciously maintains Docker images based on images for Alpine Linux, Busybox, Debian, and Ubuntu.\n1docker pull klakegg/hugo Source:- https://gohugo.io/installation/linux/ 3. MacOS Package managers 1. Homebrew Homebrew is a free and open-source package manager for macOS and Linux. This will install the extended edition of Hugo:\n1brew install hugo 2. MacPorts MacPorts is a free and open-source package manager for macOS. This will install the extended edition of Hugo:\n1sudo port install hugo 3. Docker Erlend Klakegg Bergheim graciously maintains Docker images based on images for Alpine Linux, Busybox, Debian, and Ubuntu.\n1docker pull klakegg/hugo Source:- https://gohugo.io/installation/macos/ ","link":"https://giteshwagh.com/post/hugo-worlds-fastest-framework-for-website-building/","section":"post","tags":["Hugo","gohugo","HugoTutorial","Website"],"title":" Hugo : World's Fastest Framework For Website Building 🔥 "},{"body":"","link":"https://giteshwagh.com/tags/gohugo/","section":"tags","tags":null,"title":"gohugo"},{"body":"","link":"https://giteshwagh.com/tags/hugo/","section":"tags","tags":null,"title":"Hugo"},{"body":"","link":"https://giteshwagh.com/tags/hugotutorial/","section":"tags","tags":null,"title":"HugoTutorial"},{"body":"","link":"https://giteshwagh.com/categories/web-development/","section":"categories","tags":null,"title":"Web Development"},{"body":"","link":"https://giteshwagh.com/tags/website/","section":"tags","tags":null,"title":"Website"},{"body":"Project 4 : Calculator In Python This Python project is a basic calculator that performs arithmetic operations on two numbers. The project employs fundamental programming concepts like functions, if-else statements, variables, and datatypes to provide a simple calculator interface.\nHere's a description of the project in simple language:\nIntroduction and Instructions: The program begins by displaying a message to the user. It explains how to use the calculator by entering specific keywords like 'add', 'sub', 'multi', 'div', and 'power' for different arithmetic operations.\nTaking User Inputs: The program prompts the user to enter two numbers and the desired arithmetic operation. These inputs are stored in variables x, y, and o, respectively.\nConditions and Calculations:\nThe program uses if-else statements to determine the operation to perform based on the value of o (operation keyword). If the operation is 'add', the program adds the two numbers and prints the result. If the operation is 'sub', it subtracts the second number from the first and prints the result. If the operation is 'multi', it multiplies the two numbers and prints the result. If the operation is 'div', it divides the first number by the second and prints the result. If the operation is 'power', it calculates the first number raised to the power of the second number and prints the result. Invalid Input Handling: If the input for the operation is not one of the specified keywords, the program prints \u0026quot;Invalid Input\u0026quot; to indicate that the input is not recognized.\nIn summary, this project demonstrates a simple calculator that performs arithmetic calculations based on user inputs. The user is instructed to use specific keywords for operations, and the program responds with the calculated result or an \u0026quot;Invalid Input\u0026quot; message. This project effectively utilizes programming concepts like functions for displaying instructions, if-else statements for decision-making, variables to store user inputs, and datatypes for numeric calculations.\nCode: 1# 1. Notice For User 2print(\u0026#34;\u0026#34;\u0026#34;\\nUse \u0026#39;add\u0026#39; for Addition. 3Use \u0026#39;sub\u0026#39; for Substraction. 4Use \u0026#39;multi\u0026#39; for Multiplication. 5Use \u0026#39;div\u0026#39; for Division. 6Use \u0026#39;power\u0026#39; for Power Calculations.\\n\u0026#34;\u0026#34;\u0026#34;) 7 8# 2.Variables And Data 9x = input(\u0026#34;Enter The 1st Number : \u0026#34;) 10y = input(\u0026#34;Enter The 2nd Number : \u0026#34;) 11o = input(\u0026#34;Enter The Operation : \u0026#34;) 12 13# 3.Conditions 14if (o == \u0026#34;add\u0026#34;): 15 print(float(x) + float(y)) 16 17elif (o == \u0026#34;sub\u0026#34;): 18 print(float(x) - float(y)) 19 20elif (o == \u0026#34;multi\u0026#34;): 21 print(float(x) * float(y)) 22 23elif (o == \u0026#34;div\u0026#34;): 24 print(float(x) / float(y)) 25 26elif (o == \u0026#34;power\u0026#34;): 27 print(float(x) ** float(y)) 28 29else: 30 print(\u0026#34;Invalid Input\u0026#34;) ","link":"https://giteshwagh.com/post/project-2-calculator-in-python-tutorial-8/","section":"post","tags":["Programming","Coding","python","PythonTutorial"],"title":" Project 2: Calculator - Python Tutorials For Beginners #8"},{"body":"","link":"https://giteshwagh.com/categories/python/","section":"categories","tags":null,"title":"Python"},{"body":"WHAT ARE MATCH CASES IN PYTHON? Match Cases is a method for writing conditions in Python programming. Here, We create conditions related to the value of a variable. In If-Else statements, we define the condition with the help of conditional operators. But, Here, In Match Cases the value of the variable is a condition. In Match Cases we write, What will happen when the value of a variable is 1, 2, 3, etc... This is only for example you will create a condition on any value of variable.\n1 2 Methods For Creating Conditions 3 | 4 | 5 | ---------------------------------------------| 6 | | 7 | | 8 | | 9If-Else Statements Match Cases 10 1 2# Conditions 3# Match cases in python 4 5# Methods of writing condition :- 1] If-Else Statement 6# 2] Match Cases 7 8x = input(\u0026#34;Enter the number : \u0026#34;) 9# variable x with the input system 10 11match x: 12 # Condition 1 13 case \u0026#39;1\u0026#39;: 14 print(\u0026#34;The value is 1\u0026#34;) 15 16 # Condition 2 17 case \u0026#39;2\u0026#39;: 18 print(\u0026#34;The value is 2\u0026#34;) 19 20 # Condition 3 21 case \u0026#39;3\u0026#39;: 22 print(\u0026#34;The value is 3\u0026#34;) 23 24 # Condition 4 25 case \u0026#39;4\u0026#39;: 26 print(\u0026#34;The value is 4\u0026#34;) 27 28 # Else Condition 29 case _: 30 print(\u0026#34;other value\u0026#34;) Watch Video Tutorial On Youtube:- ","link":"https://giteshwagh.com/post/match-cases-in-python-tutorial-7/","section":"post","tags":["Programming","Coding","python","PythonTutorial"],"title":" Match Cases - Python Tutorials For Beginners #7"},{"body":"What is If-Else statement ? An if-Else statement is a method for writing conditions. Another method available today is match cases. We start writing our first condition by using the 'if' keyword and the other by using the keyword 'elif'. The last condition was else it runs when other conditions will not execute. Every condition contains some code, It runs when the condition will be executed.\nWriting technique:-\nSteps for writing condition:-\nCreate a variable. (Optional). Start the first condition with the 'if' keyword. Use parenthesis and write the condition in it. Use a colon after the condition. After completing all these steps press 'Enter' for in condition and start writing code for coditions as shown in the code. Finally, Use the 'else' keyword and use the colon for writing the 'else' keyword. 1# If-Else statements in python 2 3x = input(\u0026#34;Enter the number : \u0026#34;) 4 5if (x == \u0026#34;1\u0026#34;): 6 print(\u0026#34;The value is 1\u0026#34;) 7 8elif (x == \u0026#34;2\u0026#34;): 9 print(\u0026#34;The value is 2\u0026#34;) 10 11elif (x == \u0026#34;3\u0026#34;): 12 print(\u0026#34;The value is 3\u0026#34;) 13 14elif (x == \u0026#34;4\u0026#34;): 15 print(\u0026#34;The value is 4\u0026#34;) 16 17else: 18 print(\u0026#34;Other value\u0026#34;) Watch Video Tutorial On Youtube:- ","link":"https://giteshwagh.com/post/if-else-statements-in-python-tutorial-6/","section":"post","tags":["Programming","Coding","python","PythonTutorial"],"title":" If-Else statements - Python Tutorials For Beginners #6"},{"body":" What Are Operators In Python? Operators are a symbol or small word which is useful to perform operations in Python. Type Of Operators (1) Conditional Operators (2) Logical Operators (3) Identity Operators (4) Arithmetic Operators (5) Membership Operators (6) Assignment Operators (7) Bitwise Operator Conditional / Comparison Operators In Python 1Conditional / Comparison Operators In Python 2 3\u0026lt; Greater Than symbol 4\u0026gt; Smaller Than symbol 5\u0026lt;= Equal To And Greater Than 6\u0026gt;= Equal To And Smaller Than 7== Equal To 8!= Not Equal To 1# Examples 2 31\u0026lt;2 # \u0026lt; Greater Than symbol 42\u0026gt;1 # \u0026gt; Smaller Than symbol 5i\u0026lt;=10 # \u0026lt;= Equal To And Greater Than 6i\u0026gt;=10 # \u0026gt;= Equal To And Smaller Than 7x == 10 # == Equal To 8x != 10 # != Not Equal To Conditional operators are symbols used for writing conditions in Python. Conditional operators are also known as Comparison Operators. Conditional Operators are one of the most essential operator types in Python.\nLogical Operators 1Python Logical Operators 2 3and 4or 5not 1# Example 2 3i\u0026lt;10 and i2\u0026lt;20 # and 4i\u0026lt;10 or i2\u0026lt;20 # or 5i is not 3 # not We use logical operators for giving more than one condition in Python. Logical operators are used to assign multiple conditions while coding. They are used to writing logic in Python. That's why these operators are known as logical operators in Python.\nIdentity Operators 1Python Identity Operators 2 3is 4is not 1# Examples 2 3x is y (x=y=5) # is 4x is not y # is not Identity operators are used to compare the variables in Python. Generally, We compare the value of variables with the help of an identity operator. Identity operators contain is and is not as shown.\nArithmetic Operators 1Python Arithmetic Operators 2 3+ Addition 4- Subtraction 5* Multiplication 6/ Division 7% Modulus 8** Exponentiation 9// Floor division 1# Examples 2 39+3 # Output: 12 49-3 # Output: 6 59*3 # Output: 27 69/3 # Output: 3 79%3 # Output: 0 89**3 # Output: 729 99//2 # Output: 4 Arithmetic operators are also known as Mathematical Operators in Python. We use them to perform mathematical operations.\nMembership Operators 1Python Membership Operators 2 3in 4not in 1# Examples 2 3x in y 4x not in y Membership operators contain is and is not. We use it to show whether both variables same or not.\nAssignment operators in Python 1assignment operators in Python 2 3= Simple assignment operator 4+= Add and equal operator 5-= Subtract and equal operator 6*= Asterisk and equal operator 7/= Divide and equal operator 8%= Modulus and equal operator 9//= Double divide and equal operator We use assignment operators while assigning values to variables.\nExample Code For Conditional Operators 1x = 13 2if (x \u0026lt;= 13): 3 print(\u0026#34;X is smaller or equal to 13.\u0026#34;) 4 5elif (x \u0026gt;= 13): 6 print(\u0026#34;X is greater or equal to 13.\u0026#34;) 7 8elif (x == 13): 9 print(\u0026#34;X is equal to 13.\u0026#34;) 10 11elif (x != 1): 12 print(\u0026#34;X is not equal to 13.\u0026#34;) 13 14else: 15 print(\u0026#34;Other Value\u0026#34;) Example Code For Arithmetic Operators 1print(\u0026#34; 1 + 2\u0026#34;) 2print(\u0026#34; 3 - 2\u0026#34;) 3print(\u0026#34; 1 * 2\u0026#34;) 4print(\u0026#34; 2 / 2\u0026#34;) 5print(\u0026#34; 3 % 2\u0026#34;) 6print(\u0026#34; 4**2\u0026#34;) 7print(\u0026#34; 5//2\u0026#34;) Watch The Video Tutorial On Youtube:- ","link":"https://giteshwagh.com/post/operators-in-python-tutorial-5/","section":"post","tags":["Programming","Coding","python","PythonTutorials"],"title":"Operators In Python - Python Tutorials For Beginners #5"},{"body":"","link":"https://giteshwagh.com/tags/pythontutorials/","section":"tags","tags":null,"title":"PythonTutorials"},{"body":"Let’s Create Something Amazing With Python!\nIn this blog, we’ll be learning how to create a Python program to make a simple coin toss project. This project is perfect for beginners. Today, We all learn about the practical application of concepts in Python.\nThis program will allow the computer to randomly choose one of two outcomes and display it.\nConcepts Used In This Project (1) Variables\n(2) Datatypes\n(3) Random Module\n(4) Print Function\nWe import the Random module to use its function. The module is a pre-defined code in programming. Here, We use random.choice() function to choose one element in the list.\n1# Project 1: Coin Toss In Python 2import random Now, I create a list called List, Which contains Heads and Tails.\n1List = [\u0026#34;Heads\u0026#34;, \u0026#34;Talis\u0026#34;] Here, I use the print function to display randomly chosen value from the list by Python.\n1print(random.choice(List)) Whole Code 1# Project 1: Coin Toss In Python 2import random 3List = [\u0026#34;Heads\u0026#34;, \u0026#34;Talis\u0026#34;] 4print(random.choice(List)) Watch Video Tutorial On Youtube ","link":"https://giteshwagh.com/post/coin-toss-project-python-tutorial-4/","section":"post","tags":["Visual Studio","python","Python Prgramming","Python Project"],"title":"Project 1: Coin Toss - Python Tutorials For Beginners #4"},{"body":"","link":"https://giteshwagh.com/tags/python-prgramming/","section":"tags","tags":null,"title":"Python Prgramming"},{"body":"","link":"https://giteshwagh.com/tags/python-project/","section":"tags","tags":null,"title":"Python Project"},{"body":"","link":"https://giteshwagh.com/tags/visual-studio/","section":"tags","tags":null,"title":"Visual Studio"},{"body":" Variables 1Variabl1e1 = 24565876575678 2x = input() 3print(x) 4print(Variabl1e1) Here I created a variable called \u0026quot;Variable1\u0026quot;. Variables are use for storing data. Variables are like containers, they contain values.** First of all, write the name of the variable, Use the = sign, and assign the value. This is the syntax to create variables in Python programming.\nThese are some example variables.\n1a = 12345 2b = \u0026#34;abc123\u0026#34; 3c = 12.5 4d = \u0026#34;\u0026#34;\u0026#34; 5This is multiline 6Statement! 7\u0026#34;\u0026#34;\u0026#34; 1print(Variable1) # Method 1 2# Output : 2456555554646 1print( 2456555554646 ) # Method 2 2# Output : 2456555554646 Here, We got the same output with two different methods of line code. However, Using variables is the better decision for future time to change the value of variables.\nWe use variables many times instead of writing the value. Because, We easily change the value of a variable in the whole code. We will quickly change the value of a variable in the code if any issue is found.\nRules For creating Variables (1) Use Pascal or camel cases to create the variable. Ex. the_ New _Variable, TheNewVariable.\n(2) Don’t set the name of the variable on any keyword for a function in Python.\n(3) The name only contains alphanumerics and underscores.\n(4) Names cannot start with a number.\nDatatype 1a = -554 # This is \u0026#39;int\u0026#39; data type. 2x = 3.0 # This is \u0026#39;float\u0026#39; data type. 3b = \u0026#34; Pyton \u0026#34; # This is \u0026#39;string\u0026#39; data type. 4c = None # This is \u0026#39;NoneType\u0026#39; data type. 5d = True # This is \u0026#39;boolean\u0026#39; data type. 6e = complex(687+2j) # This is \u0026#39;complex\u0026#39; data type. 7list1 = [1,4,5,6,7,8,9,0,\u0026#39;gitesh\u0026#39;] # This is a \u0026#39;list\u0026#39; data type. 8tuple = ((\u0026#34;Mango,apple\u0026#34;),(\u0026#34;Cherry,lichi\u0026#34;)) # This is a \u0026#39;tuple\u0026#39; data type. 9i = dict1 = {\u0026#34;Name \u0026#34;:\u0026#34; Gitesh\u0026#34;, \u0026#34;Age\u0026#34;:\u0026#34;15\u0026#34;} # This is a \u0026#39;dictionary\u0026#39; data type. 10g = {1,2,3,4,5,6,7,8,9,0} # This is a \u0026#39;set\u0026#39; data type. Data type is one of the most essential topic in Python. Every advance Python project contains the data type concepts. The datatype of Python means the variety of data which we can use in Python programming. There are many data types present in Python. But in 99% cases we use these variables during Python programming.\n1# Variables With Different Data Types. 2a = -554 # This is \u0026#39;int\u0026#39; data type. 3x = 3.0 # This is \u0026#39;float\u0026#39; data type. 4b = \u0026#34; Pyton \u0026#34; # This is \u0026#39;string\u0026#39; data type. 5c = None # This is \u0026#39;NoneType\u0026#39; data type. 6d = True # This is \u0026#39;boolean\u0026#39; data type. 7e = complex(687+2j) # This is \u0026#39;complex\u0026#39; data type. 8list1 = [1,4,5,6,7,8,9,0,\u0026#39;gitesh\u0026#39;] # This is a \u0026#39;list\u0026#39; data type. 9tuple = ((\u0026#34;Mango,apple\u0026#34;),(\u0026#34;Cherry,lichi\u0026#34;)) # This is a \u0026#39;tuple\u0026#39; data type. 10i = dict1 = {\u0026#34;Name \u0026#34;:\u0026#34; Gitesh\u0026#34;, \u0026#34;Age\u0026#34;:\u0026#34;15\u0026#34;} # This is a \u0026#39;dictionary\u0026#39; data type. 11g = {1,2,3,4,5,6,7,8,9,0} # This is a \u0026#39;set\u0026#39; data type. 12 13# This Code Dispaly The Data Type Of All Variables. 14print(\u0026#34;Type of a is\u0026#34;, type(a)) 15print(\u0026#34;Type of b is\u0026#34;, type(b)) 16print(\u0026#34;Type of c is\u0026#34;, type(c)) 17print(\u0026#34;Type of d is\u0026#34;, type(d)) 18print(\u0026#34;Type of e is\u0026#34;, type(e)) 19print(\u0026#34;Type of f is\u0026#34;, type(f)) 20print(\u0026#34;Type of h is\u0026#34;, type(h)) 21print(\u0026#34;Type of h is\u0026#34;, type(i)) 22print(\u0026#34;Type of g is\u0026#34;, type(g)) Run This code and see the type of variables in the code.\nWatch The Video Tutorial On Youtube ","link":"https://giteshwagh.com/post/variables-and-datatypes-python-tutorial-3/","section":"post","tags":["Programming","Coding","python","PythonTutorials"],"title":"Variables And DataTypes - Python Tutorials For Beginners #3"},{"body":" 1.print() 1print(\u0026#34;\u0026#34;\u0026#34;Hello World 2I am the coder 3this is my first progrm.\u0026#34;\u0026#34;\u0026#34;) Print is a function that is used to display value. Print is an essential function in Python programming. Print is a simple but very useful function. We generally use a Print function to display string and integer values. Print is the first function that we learn during Python programming. Print function are display the string, integer and float values. We use the Print function in our first program \u0026quot;HelloWorld\u0026quot;.\n2.input() 1x = input(\u0026#34;Enter the number : \u0026#34;) 2print(x) Input is also a very important function. We use it to get input from the user. Generally, We take input from a user and store it in a variable for use later. Input is also like a print function but the difference here is a print function only displays the value. The input also displays the value but the program ends after getting input from a user.\n3.Comments 1# This is my first program. 2# this is my comment. Comments are text in code that is ignored by Python. Comment increases the readability of code and makes it understandable for others.\nCreating Our First Program 1print(\u0026#34;Hello World\u0026#34;) 2 3# Output : Hello World 4``` 5## Watch Video Tutorials On Youtube 6 7 8 9******** ","link":"https://giteshwagh.com/post/basics-of-python-tutorial-2/","section":"post","tags":["Programming","Coding","python","PythonTutorial"],"title":" Basics Of Python - Python Tutorials For Beginners #2"},{"body":" Hello Friends👋, You know that Python is the most straightforward programming language for beginners. Today, We will see how to download and set up Python with VS Codium. VS Codium is an Integrated Development Environment (IDE). VS Codium is a simple and powerful tool for coding.\nVS Codium provides many important and latest features. VS Codium is a lightweight but powerful tool. VS Codium helps you a lot in your coding journey. I use VS Codium for coding and web development. I also use VS Codium for building this site.\nSo Let's Get Started.\nStep 1: Download the Python interpreter. Use only the official website of Python for downloading Python interpreter. Download an interpreter for your operating system. The process is too simple. Download and install it like software.\nOfficial Website Of Python\nIf you didn't understand, Watch the video tutorial. Click Here\nStep 2: Download VS Codium Go to the browser and search VS Codium download. Open the official website, download the zip file from GitHub, and install it. Official Website Of VS Codium\nAlternative Methods Install with Brew (Mac) If you are on a Mac and have Homebrew installed:\n1brew install --cask vscodium Note for Mac OS X Mojave users: if you see “App can’t be opened because Apple cannot check it for malicious software” when opening VSCodium the first time, you can right-click the application and choose Open. This should only be required the first time opening on Mojave.\nInstall with Windows Package Manager (WinGet) If you use Windows and have Windows Package Manager installed:\n1winget install vscodium Install with Chocolatey (Windows) If you use Windows and have Chocolatey installed (thanks to @Thilas):\n1choco install vscodium Install with Scoop (Windows) If you use Windows and have Scoop installed:\n1scoop bucket add extras 2scoop install vscodium Install with snap (Linux) VSCodium is available in the Snap Store as Codium, currently maintained by the VSCodium project. If your GNU/Linux distribution has support for snaps:\n1snap install codium --classic Install on Parrot OS: VSCodium is pre-installed in Parrot OS. In case you don’t find it by default, you can retrieve it from the official Parrot repo\n1sudo apt update \u0026amp;\u0026amp; sudo apt install codium Install on Nix(OS) VSCodium is available in Nixpkgs. You can install it by adding vscodium to environment.systemPackages in configuration.nix, or locally:\n1nix-env -iA nixpkgs.vscodium Install on Arch Linux VSCodium is available on the AUR (Arch User Repository), and can be installed with an AUR Helper. Examples: Aura:\n1sudo aura -A vscodium-bin Yay:\n1yay -S vscodium-bin Use a Package Manager (deb/rpm, provided by VSCodium related repository) @paulcarroty has set up a repository for VSCodium. The instructions below are adapted from there with CDN mirror. Any issues installing VSCodium using your package manager should be directed to that repository’s issue tracker. @jtagcat set up an hourly mirror of @paulcarroty’s repository. To use the mirror, you may replace paulcarroty.gitlab.io/vscodium-deb-rpm-repo with vscodium.c7.ee in your package manager configuration.\nInstall on Debian / Ubuntu (deb package): Add the GPG key of the repository:\n1wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub. 2gpg \\ 3 | gpg --dearmor \\ 4 | sudo dd of=/usr/share/keyrings/vscodium-archive-keyring.gpg Add the repository:\n1echo \u0026#39;deb [ signed-by=/usr/share/keyrings/vscodium-archive-keyring.gpg ] 2https://download.vscodium.com/debs vscodium main\u0026#39; \\ 3 | sudo tee /etc/apt/sources.list.d/vscodium.list Update then install vscodium(if you want vscodium-insiders, then replace codium by codium-insiders):\n1sudo apt update \u0026amp;\u0026amp; sudo apt install codium Install on Fedora / RHEL / CentOS / RockyLinux / OpenSUSE (rpm package): Add the GPG key of the repository:\n1sudo rpmkeys --import https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/-/ 2raw/master/pub.gpg Add the repository: Fedora/RHEL/CentOS/Rocky Linux:\n1printf \u0026#34;[gitlab.com_paulcarroty_vscodium_repo]\\nname=download.vscodium. 2com\\nbaseurl=https://download.vscodium.com/rpms/ 3\\nenabled=1\\ngpgcheck=1\\nrepo_gpgcheck=1\\ngpgkey=https://gitlab.com/paulcarroty/ 4vscodium-deb-rpm-repo/-/raw/master/pub.gpg\\nmetadata_expire=1h\u0026#34; | sudo tee -a / 5etc/yum.repos.d/vscodium.repo OpenSUSE/SUSE:\n1printf \u0026#34;[gitlab.com_paulcarroty_vscodium_repo]\\nname=gitlab. 2com_paulcarroty_vscodium_repo\\nbaseurl=https://download.vscodium.com/rpms/ 3\\nenabled=1\\ngpgcheck=1\\nrepo_gpgcheck=1\\ngpgkey=https://gitlab.com/paulcarroty/ 4vscodium-deb-rpm-repo/-/raw/master/pub.gpg\\nmetadata_expire=1h\u0026#34; | sudo tee -a / 5etc/zypp/repos.d/vscodium.repo Install the software: (if you want vscodium-insiders, then replace codium by codium-insiders) Fedora/RHEL/CentOS/Rocky Linux:\n1sudo dnf install codium OpenSUSE/SUSE:\n1sudo zypper in codium Flatpak Option (Linux) VSCodium is (unofficially) available as a Flatpak app and here’s the build repo. If your distribution has support for flatpak, and you have enabled the flathub repo, you can install VSCodium via the command line:\n1flatpak install flathub com.vscodium.codium …or by opening the flatpakref file from Flathub. VSCodium can also be found in GNOME Software if you have gnome-software-plugin-flatpak installed (as recommended in the Flathub setup instructions).\nSource :- https://vscodium.com/\nWatch Video Tutorial On Youtube :- ","link":"https://giteshwagh.com/post/setup-of-python-tutorial-1/","section":"post","tags":["Programming","Coding","python","PythonTutorial"],"title":" Installation and Setup of Python and VS Codium - Python Tutorials For Beginners #1 "},{"body":"","link":"https://giteshwagh.com/tags/coding_in_future/","section":"tags","tags":null,"title":"Coding_in_future"},{"body":"","link":"https://giteshwagh.com/tags/latest/","section":"tags","tags":null,"title":"Latest"},{"body":" Hey guy,\nYou know 2023 is coming and you also know the technology is growing very fast in 2019, 2020, and 2021 and it is also growing in covid-19 pandemic. In the tech field, we have various options to enter and a large amount of scope with a good salary for our skills. In the tech industry coding and programming are very popular. Thus, Coding will be the most valuable skill in 2023.\nBenefits of coding:-\nWe will learn to code free of cost.\nthe average annual salary of a Coder/Programmer is approximately 1.2 lakh to 10 lakh rupees in India.\nCoding is useful for jobs and businesses related to tech.\nCoding is useful in software development, AI development, game development, web development, application development, ethical hacking, etc…\nToday the government and private companies hire Ethical hackers for cyber security.\nAI development is at its peak in the future.\nWe will learn to code and also earn from freelancing.\nYouTube, giteshwagh.com and etc. are such platforms for learning coding free of cost.\n","link":"https://giteshwagh.com/post/why-coding-will-become-the-most-valuable-skill-in-the-future/","section":"post","tags":["Programming","Coding","Latest","Coding_in_future"],"title":"Why Coding Will Become The Most Valuable Skill In The Future?"},{"body":"","link":"https://giteshwagh.com/tags/free_video_editor/","section":"tags","tags":null,"title":"Free_Video_editor"},{"body":"","link":"https://giteshwagh.com/tags/kdenlive/","section":"tags","tags":null,"title":"Kdenlive"},{"body":"","link":"https://giteshwagh.com/tags/video_editing/","section":"tags","tags":null,"title":"Video_editing"},{"body":" Kdenlive is a free video editor. Today, Video is an important skill for content creators. the video editor is essential in video editing after editing skills. Kdenlive is free and open-source software for video editing. Kdenlive is lightweight and runs on 4GB ram.\nSpecification for Kdenlive: 1.Operating System = Windows 7 or newer\nProcessor = 2 cores for SD video, 4 cores for HD video, and 8 cores for 4K video.\nGPU = OpenGL 2.0 that works correctly and is compatible.\nBest feature :\nEasy interface and Themable interface\nMulti-track video editing.\nUse any video and audio format.\nMany effects and transitions are available.\nMonitoring audio or video is also available.\nPoxy editing is available.\nAutomatic backup system.\nTimeline preview feature is available.\nAll information about Kdenlive is taken from the official site of Kdenlive. Check for more... Official site of Kdenlive : https://kdenlive.org/en/\n","link":"https://giteshwagh.com/post/why-kdenlive-is-the-best-free-video-editor/","section":"post","tags":["Kdenlive","Free_Video_editor","Video_editing"],"title":"Why Kdenlive Is The Best Free Video Editor?"},{"body":"","link":"https://giteshwagh.com/tags/c-development/","section":"tags","tags":null,"title":"C-Development"},{"body":"","link":"https://giteshwagh.com/tags/c-prgramming/","section":"tags","tags":null,"title":"C-Prgramming"},{"body":"","link":"https://giteshwagh.com/tags/c-sharp/","section":"tags","tags":null,"title":"C-Sharp"},{"body":" C#(C sharp) is a programming language developed by Microsoft. C# runs on .NET Framework.\nC# is used to develop the following applications and software :\nMobile Apps Video Games Desktop Apps Web Apps Graphical User Interface(GUI) Microsoft Visual Studio is one of the best Integrated Development Environment (IDE) and Code Editor for C#.\nStep 1: Download Visual Studio Installer Now, We will start to download Visual Studio to start programming. We will download Visual Studio as latest as possible for our PC. A PC is our primary requirement for C# programming Because a PC is more powerful than any other digital device. Downloading Visual Studio is very simple and the process is the same as other software downloads. First, We install Visual Studio Installer for the installation of visual studio.\n[Remember: This process download the Community Version because it is free and the other is paid. The community version is best for beginners]\nStep 2: Installation of Visual Studio After Visual Studio Installer is downloaded, We open it. Then, We saw the various packages for different work. Select the \u0026quot;.NET Desktop Development\u0026quot; package and install visual studio. After installation Sign in, select the theme and our visual studio is ready.\nDownload Link Of Visual Studio: https://visualstudio.microsoft.com/ ","link":"https://giteshwagh.com/post/introduction-to-c-sharp-tutorial-1/","section":"post","tags":["VisualStudio","C-Sharp","C-Prgramming","C-Development"],"title":"Introduction To C# Programming Language - C# Tutorials For Beginners #1"},{"body":"","link":"https://giteshwagh.com/tags/visualstudio/","section":"tags","tags":null,"title":"VisualStudio"},{"body":"","link":"https://giteshwagh.com/tags/c-programming/","section":"tags","tags":null,"title":"C-Programming"},{"body":" Before creating our first program we will create a project.\nStep 1: Open Visual Studio.\nStep 2: Click on \u0026quot;Create New Project\u0026quot;\nStep 3: Select Language C#. Choose a platform(Our OS).\nStep 4: The project type will be 'console'\nOur first program is printing of \u0026quot;HelloWorld\u0026quot;\nCode:-\n1 2using System; 3using System.Collections.Generic; 4using System.Linq; 5using System.Text; 6using System.Threading.Tasks; 7 8 9 10namespace ConsoleApp1 // The namespace is like a container it stores Classes and methods// 11 12{ 13 class Program 14 15 { 16 static void Main(string[] args) 17 18 { 19 Console.WriteLine(\u0026#34;hello world\u0026#34;); // This Command for printing is given of value. 20 Console.ReadLine(); // This Command for pause results for seeing clearly. 21 22 } 23 24 } 25 26} We will Understand all code clearly in the next post. Thank You. ","link":"https://giteshwagh.com/post/creating-our-first-program-c-sharp-tutorial-2/","section":"post","tags":["VisualStudio","C-Sharp","C-Programming","C-Development"],"title":"Creating Our First Program In C#| C# Tutorials #2 "},{"body":"I'm a passionate YouTuber who loves all things related to coding, programming, and gaming. Whether it's diving into the exciting world of game development, unraveling the mysteries of programming languages, or exploring the endless possibilities of software, you'll find it all on my YouTube channel.\nWhat I Do:\n🎮 Game Development: Join me on an adventure into the realm of game development. I share tutorials, tips, and tricks to help you create your own games, from the basics to advanced techniques.\n💻 Programming Insights: Programming is my playground, and I'm here to guide you through it. Whether you're a beginner or looking to expand your skills, I offer clear explanations and step-by-step guidance.\n🌐 Software Exploration: Software makes our digital world tick, and I'm here to help you understand and harness its power. Discover how software can shape the way we interact with technology.\nWhy Choose My Channel:\n🎥 Engaging Content: My videos are designed to be fun, engaging, and easy to follow. No matter your skill level, you'll find something exciting to learn.\n🤝 Community: Join a community of like-minded individuals who share your passion for coding, programming, and gaming. Connect, learn, and grow together.\n🔔 Stay Updated: Subscribe to my channel to stay up-to-date with the latest trends, tools, and techniques in the world of coding, programming, and gaming.\nWhether you're a beginner taking your first steps or an experienced enthusiast looking to deepen your knowledge, my channel is here to inspire, educate, and entertain.\nReady to embark on this exciting journey? Subscribe now and let's explore the amazing world of coding, programming, and gaming together!\n📺 YouTube: https://www.youtube.com/@TechnicalGamingZone\n❤️ Github: https://github.com/giteshwagh\n","link":"https://giteshwagh.com/about/","section":"","tags":null,"title":"😀About"},{"body":"","link":"https://giteshwagh.com/tags/index/","section":"tags","tags":null,"title":"index"},{"body":"","link":"https://giteshwagh.com/series/","section":"series","tags":null,"title":"Series"}]